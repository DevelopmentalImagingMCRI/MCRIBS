#!/usr/bin/env python3

import os
import getopt
import sys
import subprocess
import argparse
import numpy
import datetime
import re
import socket

def getScriptPath():
    fullPath = os.path.realpath(__file__)
    head, tail = os.path.split(fullPath)

    return head

def runCommand(CMD, isPython = False, log_file_name = None):
    print("Running command:")

    if isPython == True:
        scriptPath = getScriptPath()
        T = [os.path.join(scriptPath, '..', 'VTK', 'VTK-install', 'bin', "vtkpython"), os.path.join(scriptPath, CMD[0])]
        #T = [os.path.join(scriptPath, "vtkpython"), os.path.join(scriptPath, CMD[0])]
        #print(T)
        T.extend(CMD[1:])
        CMD = T[:]
        del T

    if isinstance(log_file_name, str):
        FID = open(log_file_name, 'a')
        FID.write("\t" + " ".join(CMD) + "\n")
        FID.close()

    print("\t" + " ".join(CMD))
    try:
        subprocess.check_call(CMD)
    except subprocess.CalledProcessError:
        print("Command Failed")
        quit()

def structN4DefaultOptions():
    return ['-v', '-c', '[100x100x100x100,0]', '-b', '[200]', '-s', '3']

def main():
    doProcessingSteps = dict.fromkeys(['neckcrop', 'tissueseg', 'surfrecon', 'inflatesphere', 'cortparc', 'cortthickness', 'surfreg', 'segstats', 'aparc2aseg', 'apas2aseg', 'parcstats'])

    atlases = ['aparc', 'aparc+DKTatlas', 'aparc+DKTatlas.manual']
    defaultAtlas = atlases
    defaultAtlas = ['aparc+DKTatlas', 'aparc']

    argParser = argparse.ArgumentParser(description = "Performs MCRIB preprocessing and parcellation\n\nFor each <subject id>, input data are to be placed as follows:\n\tRawT2/<subject id>.nii.gz: Whole-brain T2-weighted image", usage = sys.argv[0] + " <processing directives> [processing options] <subject id>", formatter_class = argparse.RawTextHelpFormatter)

    neckCropArgGroup = argParser.add_argument_group('neckcrop', "PROCESSING DIRECTIVE. Performs neck cropping")
    neckCropArgGroup.add_argument('--neckcrop', help = "PROCESSING DIRECTIVE", action = 'store_true')
    neckCropArgGroup.add_argument('--noneckcrop', help = "PROCESSING DIRECTIVE", action = 'store_true')
    neckCropArgGroup.add_argument('--voxelsize', help = "Voxel size to use for isotropic resampling. Use \"volumepreserve\" to preserve original voxel volume", required = False, type = str, action = 'store', default = 'volumepreserve')

    tissueSegArgGroup = argParser.add_argument_group('tissueseg', "Perform tissue type segmentation, depends --conform")
    tissueSegArgGroup.add_argument('--tissueseg', help = "PROCESSING DIRECTIVE", required = False, action = 'store_true')
    tissueSegArgGroup.add_argument('--notissueseg', help = "DISABLE tissueseg", required = False, action = 'store_true')
    tissueSegArgGroup.add_argument('--largeventricles', help = "Large ventricle options", required = False, action = 'store_true')
    # tissueSegArgGroup.add_argument('--nobspline', help = "Do not use B-Spline in registration step", required = False, action = 'store_true')
    # tissueSegArgGroup.add_argument('--nowmlaplacianexpand', help = "Do not expand WM segmentation using bright regions", required = False, action = 'store_true')
    tissueSegArgGroup.add_argument('--gmsegcompthreshold', help = "Threshold for GM segmentation connected components (0, 1]", required = False, type = float, default = 0.2)
    tissueSegArgGroup.add_argument('--tissuesegmethod', help = "Specify tissue segmentation method", required = False, choices = ['MCRIBS'], default = 'MCRIBS')
    tissueSegArgGroup.add_argument('--nodilatedarkwm', help = "Do not dilate dark WM, used if fundi are missing from GM seg", required = False, action = 'store_true')
    tissueSegArgGroup.add_argument('--parallel', help = "Training images -> Subject images in parallel", required = False, action = 'store_true')
    tissueSegArgGroup.add_argument('--stopaftergmseg', help = "Stop after segmentation_gm generation", required = False, action = 'store_true')

    # tissueSegArgGroup.add_argument('--subjectage', help = "Subject age in weeks", required = False, choices = numpy.arange(28, 45), default = 40, type = int)

    surfReconArgGroup = argParser.add_argument_group('surfrecon', 'Perform cortical surface extraction, depends --tissueseg')
    surfReconArgGroup.add_argument('--surfrecon', help = "PROCESSING DIRECTIVE", required = False, action = 'store_true')
    surfReconArgGroup.add_argument('--nosurfrecon', help = "DISABLE surfrecon", required = False, action = 'store_true')
    #surfReconArgGroup.add_argument('--surfreconmethod', help = "Specify cortical surface extraction method", required = False, choices = ['Deformable'], default = 'Deformable')
    surfReconArgGroup.add_argument('--deformablejointhresh', help = "Join threshold parameter for Deformable", required = False, type = float, default = 1)
    surfReconArgGroup.add_argument('--deformablefastcollision', help = "Use Deformable fast collision test", required = False, action = 'store_true')
    surfReconArgGroup.add_argument('--deformablenoensurepialoutside', help = "Dont ensure pial is outside white", required = False, action = 'store_true')
    surfReconArgGroup.add_argument('--deformablelargeclose', help = "Large close", required = False, action = 'store_true')
    surfReconArgGroup.add_argument('--cleansr', help = "Clean SurfReconDeformable before running", required = False, action = 'store_true')
    surfReconArgGroup.add_argument('--cleanpial', help = "Clean only pial from SurfReconDeformable before running", required = False, action = 'store_true')
    surfReconArgGroup.add_argument('--debugwhite', help = "Debug white surface", required = False, action = 'store_true')
    surfReconArgGroup.add_argument('--debugpial', help = "Debug pial surface", required = False, action = 'store_true')
    surfReconArgGroup.add_argument('--debugcerebrum', help = "Debug cerebrum surfaces", required = False, action = 'store_true')

    inflateSphereArgGroup = argParser.add_argument_group('inflatesphere', 'Perform inflation, spherical mapping, curv, area, depends --surfrecon')
    inflateSphereArgGroup.add_argument('--inflatesphere', help = "PROCESSING DIRECTIVE", required = False, action = 'store_true')
    inflateSphereArgGroup.add_argument('--noinflatesphere', help = "DISABLE inflatesphere", required = False, action = 'store_true')

    surfRegArgGroup = argParser.add_argument_group('surfreg', 'Perform surface registration to the spherical template, depends --surfrecon')
    surfRegArgGroup.add_argument('--surfreg', help = "PROCESSING DIRECTIVE", required = False, action = 'store_true')
    surfRegArgGroup.add_argument('--nosurfreg', help = "DISABLE surfreg", required = False, action = 'store_true')

    surfVolArgGroup = argParser.add_argument_group('surfvol', 'Perform surface volume calculations, depends --surfrecon')
    surfVolArgGroup.add_argument('--surfvol', help = "PROCESSING DIRECTIVE", required = False, action = 'store_true')
    surfVolArgGroup.add_argument('--nosurfvol', help = "DISABLE surfvol", required = False, action = 'store_true')

    cortRibbonArgGroup = argParser.add_argument_group('cortribbon', 'Perform cortical ribbon volume generation, depends --surfrecon')
    cortRibbonArgGroup.add_argument('--cortribbon', help = "PROCESSING DIRECTIVE", required = False, action = 'store_true')
    cortRibbonArgGroup.add_argument('--nocortribbon', help = "DISABLE cortribbon", required = False, action = 'store_true')

    surfParcArgGroup = argParser.add_argument_group('cortparc', 'Perform cortical parcellation, depends on --surfreg')
    surfParcArgGroup.add_argument('--cortparc', help = "PROCESSING DIRECTIVE", required = False, action = 'store_true')
    surfParcArgGroup.add_argument('--nocortparc', help = "DISABLE cortparc", required = False, action = 'store_true')

    aparc2asegArgGroup = argParser.add_argument_group('aparc2aseg', 'Perform cortical parcellation, depends on --surfreg')
    aparc2asegArgGroup.add_argument('--aparc2aseg', help = "PROCESSING DIRECTIVE", required = False, action = 'store_true')
    aparc2asegArgGroup.add_argument('--noaparc2aseg', help = "DISABLE aparc2aseg", required = False, action = 'store_true')
    aparc2asegArgGroup.add_argument('--aparc2asegatlases', help = "Parcellation scheme to use for aparc2aseg, DEPRECATED use cortparcatlases", required = False, choices = atlases, nargs = '+', default = [])

    cortThicknessArgGroup = argParser.add_argument_group('cortthickness', 'Compute cortical thickness')
    cortThicknessArgGroup.add_argument('--cortthickness', help = "PROCESSING DIRECTIVE", required = False, action = 'store_true')
    cortThicknessArgGroup.add_argument('--nocortthickness', help = "DISABLE cortthickness", required = False, action = 'store_true')

    apas2asegArgGroup = argParser.add_argument_group('apas2aseg', 'Refine aseg.presurf using cortical parcellations, depends on --aparc2aseg with aparc')
    apas2asegArgGroup.add_argument('--apas2aseg', help = "PROCESSING DIRECTIVE", required = False, action = 'store_true')
    apas2asegArgGroup.add_argument('--noapas2aseg', help = "DISABLE apas2aseg", required = False, action = 'store_true')

    segstatsArgGroup = argParser.add_argument_group('segstats', 'Perform segstats on the aseg image, depends on --apas2aseg')
    segstatsArgGroup.add_argument('--segstats', help = "PROCESSING DIRECTIVE", required = False, action = 'store_true')
    segstatsArgGroup.add_argument('--nosegstats', help = "DISABLE segstats", required = False, action = 'store_true')

    parcstatsArgGroup = argParser.add_argument_group('parcstats', 'Perform stats on the cortical surfaces, depends on --apas2aseg')
    parcstatsArgGroup.add_argument('--parcstats', help = "PROCESSING DIRECTIVE", required = False, action = 'store_true')
    parcstatsArgGroup.add_argument('--noparcstats', help = "DISABLE parcstats", required = False, action = 'store_true')

    #dhcpImportArgGroup = argParser.add_argument_group('dhcpimport', 'Perform import of completed dHCP run, directory containing data required --dhcpanatdir')
    #dhcpImportArgGroup.add_argument('--dhcpimport', help = "PROCESSING DIRECTIVE", required = False, action = 'store_true')
    #dhcpImportArgGroup.add_argument('--dhcpanatdir', help = "", required = False, action = 'store_true')
    #dhcpImportArgGroup.add_argument('--dhcpsourcedir', help = "", required = False, action = 'store_true')
    #dhcpImportArgGroup.add_argument('--dhcpderiveddir', help = "", required = False, action = 'store_true')

    argParser.add_argument('-useT1', '--useT1', help = "Use a T1 image for Deformable, must be RawT1RadiologicalIsotropic/<subjectid>.nii.gz and registered to the conformed T2 image", required = False, action = 'store_true')

    argParser.add_argument('-all', '--all', help = "Do all steps", required = False, action = 'store_true')
    argParser.add_argument('-autoreconaftersurf', '--autoreconaftersurf', help = "Do all steps after surface reconstruction", required = False, action = 'store_true')

    argParser.add_argument('-usegpu', help = "Use the GPU for inflation and spherical projection, affects --inflatesphere", required = False, action = 'store_true')
    argParser.add_argument('-steplist', '--steplist', help = "Prints out the processing step options in order", required = False, action = 'store_true')

    argParser.add_argument('--cortparcatlases', help = "Parcellation(s) scheme to use for cortical parcellation steps", required = False, choices = atlases, default = defaultAtlas, nargs = "+")

    argParser.add_argument('-openmp', '--openmp', '-nthreads', '--nthreads', help = "Number of threads for multithreading applications", required = False, type = int, default = 1)
    argParser.add_argument('-hemi', '--hemi', help = "Only process a single hemisphere", choices = ['lh', 'rh'], required = False)

    argParser.add_argument('subjectid', help = "The subject ID, must have RawT2/<subjectid>.nii.gz")

    options = argParser.parse_args()

    if options.steplist == True:
        T = ['--' + x for x in doProcessingSteps]
        print(" ".join(T))
        exit

    #argParser.print_help()
    #print(vars(options))
#print(type(options.openmp))
    #quit()
    anyProcessingStep = False
    #defaultAtlas = ['aparc+DKTatlas']
    #defaultAtlas = ['aparc']

    for curStep in doProcessingSteps.keys():
        if vars(options)[curStep]:
            anyProcessingStep = True

    #if anyProcessingStep == False:
    #    print("No processing steps specified")
    #    argParser.print_help()
    #    quit()

        # export OMP_NUM_THREADS=options.openmp
    os.environ['OMP_NUM_THREADS'] = str(options.openmp)
    os.environ['SUBJECTS_DIR'] = os.path.join(os.getcwd(), 'freesurfer')

    # set up for vtk and vtkpython 3
    scriptPath = getScriptPath()

    if not 'LD_LIBRARY_PATH' in os.environ:
        os.environ['LD_LIBRARY_PATH'] = ''

    if not 'PATH' in os.environ:
        os.environ['PATH'] = ''

    if not 'PYTHONPATH' in os.environ:
        os.environ['PYTHONPATH'] = ''

    os.environ['LD_LIBRARY_PATH'] = os.path.join(scriptPath, '..', 'VTK', 'VTK-install', 'lib') + os.pathsep + os.environ['LD_LIBRARY_PATH']
    os.environ['LD_LIBRARY_PATH'] = os.path.join(scriptPath, '..', 'MIRTK', 'MIRTK-install', 'lib') + os.pathsep + os.environ['LD_LIBRARY_PATH']

    os.environ['PATH'] = os.path.join(scriptPath, '..', 'MIRTK', 'MIRTK-install', 'lib', 'tools') + os.pathsep + os.environ['PATH']
    os.environ['PATH'] = os.path.join(scriptPath, '..', 'MIRTK', 'MIRTK-install', 'bin') + os.pathsep + os.environ['PATH']

    os.environ['PYTHONPATH'] = os.path.join(scriptPath, '..', 'MIRTK', 'MIRTK-install', 'lib', 'python') + os.pathsep + os.environ['PYTHONPATH']
    os.environ['PYTHONPATH'] = os.path.join(scriptPath, '..', 'lib', 'python') + os.pathsep + os.environ['PYTHONPATH']

    # set the template path
    os.environ['TEMPLATEDIR'] = os.path.join(os.environ['MCRIBS_HOME'], 'lib', 'MCRIBSTemplates')

    if not options.hemi is None:
        Hemis = options.hemi
    else:
        Hemis = 'both'

    logDir = 'logs'

    os.makedirs(logDir, exist_ok = True)

    logFileName = os.path.join(logDir, options.subjectid + ".log")

    if not os.path.isfile(logFileName):
        logFileFID = open(logFileName, 'w')
    else:
        logFileFID = open(logFileName, 'a')

    logFileFID.write('--------------------------------------------\n')
    logFileFID.write('MCRIBReconAll invocation\n')
    logFileFID.write(" ".join(sys.argv[1:]) + '\n')
    logFileFID.write(str(datetime.datetime.now()) + "\n")
    logFileFID.write("host: " + str(socket.gethostname()) + "\n")
    # option 2, run git rev-parse HEAD to get the commit hash
    # change to the script path
    CWD = os.getcwd()
    os.chdir(os.path.join(scriptPath, '..'))

    # run git rev-parse HEAD
    gitProcess = subprocess.run(['git', 'rev-parse', 'HEAD'], stdout = subprocess.PIPE)
    currentGitHash = gitProcess.stdout.decode("utf-8").rstrip()
    # write to log file
    logFileFID.write('MCRIBS git revision: ' + currentGitHash + "\n\n")

    # get VTK version

    #os.chdir(os.path.join(scriptPath, '..', 'MIRTK', 'MIRTK'))

    # I don't have the git repo info for MIRTK so I have to put the commit in manually
    #gitProcess = subprocess.run(['git', 'rev-parse', 'HEAD'], stdout = subprocess.PIPE)
    #MIRTKGitHash = gitProcess.stdout.decode("utf-8").rstrip()
    logFileFID.write("MIRTK version\n")
    logFileFID.write('MIRTK git revision: c8e35554f1c23ef14a1c1c51b042e43f82fb44a7' + "\n\n")

    # get ITK version
    # find ITKConfig.cmake in scriptPath/ITK/ITK-install

    os.chdir(os.path.join(scriptPath, '..', 'ITK', 'ITK'))

    gitProcess = subprocess.run(['git', 'rev-parse', 'HEAD'], stdout = subprocess.PIPE)
    ITKGitHash = gitProcess.stdout.decode("utf-8").rstrip()
    logFileFID.write("ITK version\n")
    logFileFID.write('ITK git revision: ' + ITKGitHash + "\n")

    ITKConfigFileName = None

    for root, dirs, files in os.walk(os.path.join(scriptPath, '..', 'ITK', 'ITK-install')):
        if "ITKConfig.cmake" in files:
            ITKConfigFileName = os.path.join(root, "ITKConfig.cmake")
            break

    if not ITKConfigFileName is None:
        ITKMajorVersion = None
        ITKMinorVersion = None
        ITKPatchVersion = None

        FID = open(ITKConfigFileName, 'r')

        for curLine in FID:
            if not (ITKMajorVersion is None or ITKMinorVersion is None or ITKPatchVersion is None):
                break

            #print(curLine)
            mat = re.match('^set\(ITK_VERSION_(MAJOR|MINOR|PATCH) "(\d+)"\)$', curLine)
            if not mat is None:
                if mat.group(1) == "MAJOR":
                    ITKMajorVersion = mat.group(2)
                elif mat.group(1) == "MINOR":
                    ITKMinorVersion = mat.group(2)
                elif mat.group(1) == "PATCH":
                    ITKPatchVersion = mat.group(2)
        FID.close()

    if not (ITKMajorVersion is None or ITKMinorVersion is None or ITKPatchVersion is None):
        logFileFID.write('ITK version: ' + ITKMajorVersion + "." + ITKMinorVersion + "." + ITKPatchVersion + "\n\n")
    else:
        logFileFID.write("\n")
    del ITKMajorVersion
    del ITKMinorVersion
    del ITKPatchVersion


    # get VTK version
    os.chdir(os.path.join(scriptPath, '..', 'VTK', 'VTK'))

    gitProcess = subprocess.run(['git', 'rev-parse', 'HEAD'], stdout = subprocess.PIPE)
    VTKGitHash = gitProcess.stdout.decode("utf-8").rstrip()

    logFileFID.write("VTK version\n")
    logFileFID.write('VTK git revision: ' + VTKGitHash + "\n")

    VTKConfigFileName = None

    for root, dirs, files in os.walk(os.path.join(scriptPath, '..', 'VTK', 'VTK-install')):
        if "VTKConfig.cmake" in files:
            VTKConfigFileName = os.path.join(root, "VTKConfig.cmake")
            break

    if not VTKConfigFileName is None:
        VTKMajorVersion = None
        VTKMinorVersion = None
        VTKPatchVersion = None

        FID = open(VTKConfigFileName, 'r')

        for curLine in FID:
            if not (VTKMajorVersion is None or VTKMinorVersion is None or VTKPatchVersion is None):
                break

            #print(curLine)
            mat = re.match('^SET\(VTK_(MAJOR|MINOR|BUILD)_VERSION "(\d+)"\)$', curLine)
            if not mat is None:
                if mat.group(1) == "MAJOR":
                    VTKMajorVersion = mat.group(2)
                elif mat.group(1) == "MINOR":
                    VTKMinorVersion = mat.group(2)
                elif mat.group(1) == "BUILD":
                    VTKPatchVersion = mat.group(2)
        FID.close()

        if not (VTKMajorVersion is None or VTKMinorVersion is None or VTKPatchVersion is None):
            logFileFID.write('VTK version: ' + VTKMajorVersion + "." + VTKMinorVersion + "." + VTKPatchVersion + "\n\n")
        else:
            logFileFID.write("\n")
        del VTKMajorVersion
        del VTKMinorVersion
        del VTKPatchVersion

    # change back to directory
    os.chdir(CWD)
    del CWD

    logFileFID.write('--------------------------------------------\n\n')
    isFromDHCP = os.path.isfile(os.path.join('freesurfer', options.subjectid, '.isFromDHCP'))
    #print("isFromDHCP: " + str(isFromDHCP))

    if (options.neckcrop == True or options.all == True) and not isFromDHCP and options.noneckcrop == False:
        cmd = ["MCRIBNeckCrop", options.subjectid, options.voxelsize]
        runCommand(cmd, log_file_name = logFileName)
        #print("--struct-reorient no longer needed, ignoring")
        pass


    if (options.tissueseg == True or options.all == True) and not isFromDHCP and options.notissueseg == False:
        # if options.tissuesegmethod == 'DrawEM':
        #     cmd = ["MCRIBTissueSegDrawEM", options.subjectid, str(options.subjectage)]
        #     print(" ".join(cmd))
        #     runCommand(cmd, log_file_name = logFileName)
        if options.tissuesegmethod == 'MCRIBS':
            cmd = ["MCRIBTissueSegMCRIBS"]
            if options.largeventricles:
                cmd.append('-largeventricles')
            if options.nodilatedarkwm:
                cmd.append('-nodilatedarkwm')
            if options.stopaftergmseg:
                cmd.append('-stopaftergmseg')
            # if options.nobspline:
            #     cmd.append('-nobspline')
            # if options.nowmlaplacianexpand:
            #     cmd.append('-nowmlaplacianexpand')
            cmd.extend(['-gmsegcompthreshold', str(options.gmsegcompthreshold)])
            cmd.append(options.subjectid)
            if options.parallel:
                cmd.append('-parallel')
                
            print(" ".join(cmd))

            runCommand(cmd, log_file_name = logFileName)
        pass

    if (options.surfrecon == True or options.all == True) and not isFromDHCP and options.nosurfrecon == False:
        # old DrawEM version
        #cmd = ["MCRIBSurfReconDeformable", options.subjectid, str(options.deformablejointhresh), str(options.deformablefastcollision), str(options.useT1), str(options.deformablenoensurepialoutside), str(options.bonnie), str(options.deformablelargeclose), str(options.deformablet1only)]


        cmd = ["MCRIBSurfReconDeformableMCRIBS", options.subjectid]
        if options.deformablefastcollision == True:
            cmd.append('--fastcollision')
        if options.deformablenoensurepialoutside == True:
            cmd.append('--noensureoutsidepial')
        if options.deformablelargeclose == True:
            cmd.append('--largeclose')
        if options.largeventricles:
            cmd.append('--largeventricles')
        # if options.nowmlaplacianexpand:
        #     cmd.append('--nowmlaplacianexpand')
        if options.debugwhite:
            cmd.append('--debugwhite')
        if options.debugpial:
            cmd.append('--debugpial')
        if options.debugcerebrum:
            cmd.append('--debugcerebrum')
        if options.cleansr:
            cmd.append('--cleansr')
        if options.cleanpial:
            cmd.append('--cleanpial')

        cmd.extend(['--jointhreshold', str(options.deformablejointhresh)])
        runCommand(cmd, log_file_name = logFileName)
        pass

    if (options.inflatesphere == True or options.all == True or options.autoreconaftersurf == True) and options.noinflatesphere == False:
        cmd = ["MCRIBInflateSphere", options.subjectid]
        if options.usegpu == True:
            cmd.append('-use-gpu')
        cmd.append(Hemis)
        runCommand(cmd, log_file_name = logFileName)
        pass

    if (options.surfreg == True or options.all == True or options.autoreconaftersurf == True) and options.nosurfreg == False:
        cmd = ["MCRIBSurfReg", options.subjectid, Hemis]
        runCommand(cmd, log_file_name = logFileName)
        pass

    if (options.cortparc == True or options.all == True or options.autoreconaftersurf == True) and options.nocortparc == False:
        cmd = ["MCRIBCortParc", options.subjectid, Hemis]
        cmd.extend(options.cortparcatlases)
        runCommand(cmd, log_file_name = logFileName)
        pass


    if (options.cortribbon == True or options.all == True or options.autoreconaftersurf == True) and options.nocortribbon == False:
        cmd = ["MCRIBVolMaskPython", options.subjectid]
        runCommand(cmd, log_file_name = logFileName)
        pass

    if (options.cortthickness == True or options.all == True or options.autoreconaftersurf == True) and not isFromDHCP and options.nocortthickness == False:
        cmd = ["MCRIBCortThickness", options.subjectid, Hemis]
        runCommand(cmd, log_file_name = logFileName)
        pass

    if (options.aparc2aseg == True or options.all == True or options.autoreconaftersurf == True) and options.noaparc2aseg == False:
        cmd = ["MCRIBAPARC2ASEG", options.subjectid]
        cmd.extend(options.cortparcatlases)
        runCommand(cmd, log_file_name = logFileName)
        pass
    # deprecated, done in aparc2aseg
    #if (options.apas2aseg == True or options.all == True or options.autoreconaftersurf == True) and options.noapas2aseg == False:
    #    cmd = ["MCRIBAPAS2ASEG", options.subjectid]
    #    runCommand(cmd, log_file_name = logFileName)
    #    pass

    if (options.segstats == True or options.all == True or options.autoreconaftersurf == True) and options.nosegstats == False:
        cmd = ["MCRIBSegStats", options.subjectid]
        runCommand(cmd, log_file_name = logFileName)
        pass

    if (options.surfvol == True or options.all == True or options.autoreconaftersurf == True) and options.nosurfvol == False:
        cmd = ["MCRIBSurfVol", options.subjectid, Hemis]
        runCommand(cmd, log_file_name = logFileName)
        pass

    if (options.parcstats == True or options.all == True or options.autoreconaftersurf == True) and options.noparcstats == False:
        cmd = ["MCRIBParcStatsPython", options.subjectid, Hemis]
        for curAtlas in options.cortparcatlases:
            curCmd = cmd[:]
            curCmd.extend([curAtlas])
            runCommand(curCmd, isPython = False, log_file_name = logFileName)
        pass

    logFileFID.write("Finished without error\n\n")
    logFileFID.close()
    quit()
#def main():

if __name__ == "__main__":
    main()
